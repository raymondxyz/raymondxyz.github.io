{"ast":null,"code":"import _slicedToArray from\"/Users/raymondzhang/Code/website/raymondxyz.github.io/raymondxyz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{colors}from'../../styling/colors';import NavArrowDown from'../miscellaneous/NavArrowDown';import NavArrowUp from'../miscellaneous/NavArrowUp';import data0 from\"../../assets/response_offset0.json\";import data1 from\"../../assets/response_offset100.json\";import data2 from\"../../assets/response_offset200.json\";import data3 from\"../../assets/response_offset300.json\";import ScrollAnimation from\"react-animate-on-scroll\";var spotifyIdentifier=\"6vvoQKMci0NB7Zbo10t61N\";var allIdentifiers;var totalTracks=1;// This function is crucial for the component to work. We need it to load the array of string IDs. We default the ID value\n// to a meenoi song in case it doesn't load before the script loads, but otherwise this will load before user clicks reroll.\n// We have not used an API (anymore) because it requires the use of authorisation (OAuth 2.0) and I don't want to\n// hardcode sensitive data into the publicly available code.\nfunction loadSpotifyIDS(){var data=[data0,data1,data2,data3];var identifiers=[];var sum=0;data.forEach(function(jsonFile){jsonFile.items.forEach(function(trackitem){identifiers.push(trackitem.track.id);sum++;});});totalTracks=sum;allIdentifiers=identifiers;}function Closing(_ref){var scrollDown=_ref.scrollDown,scrollUp=_ref.scrollUp,tooltipDown=_ref.tooltipDown,tooltipUp=_ref.tooltipUp,id=_ref.id;var _useState=useState(),_useState2=_slicedToArray(_useState,2),track=_useState2[0],setTrack=_useState2[1];var updateSpotify=function updateSpotify(){var randomIndex=Math.round(Math.random()*totalTracks);spotifyIdentifier=allIdentifiers[randomIndex];// Reload the component\nsetTrack({});};// On mount we want to do a load of data first (or an API call) and then update once to randomise initial song\nuseEffect(function(){loadSpotifyIDS();updateSpotify();},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"full_section\",style:{background:\"linear-gradient(90deg, #000000 35%, #111111 35%)\"},id:id},/*#__PURE__*/React.createElement(\"div\",{className:\"section_two_column\"},/*#__PURE__*/React.createElement(ScrollAnimation,{animateIn:\"animate__zoomIn\",delay:\"200\",duration:\"0.7\",animateOnce:true},/*#__PURE__*/React.createElement(\"div\",{className:\"left_column_content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"arrow_section_up\"},/*#__PURE__*/React.createElement(NavArrowUp,{coloring:colors.white,scrollUp:scrollUp,tooltipUp:tooltipUp})),/*#__PURE__*/React.createElement(\"h1\",{style:{color:colors.white,textAlign:\"center\"}},\" Bored? \"),/*#__PURE__*/React.createElement(\"h3\",{style:{color:colors.white,textAlign:\"center\"}},\"A bit of fun. Explore the songs I've recently listened to and liked on spotify; click refresh to randomly retrieve a different song.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"arrow_section_down\"}))),/*#__PURE__*/React.createElement(ScrollAnimation,{animateIn:\"animate__zoomIn\",delay:\"200\",duration:\"0.7\",animateOnce:true},/*#__PURE__*/React.createElement(\"div\",{className:\"right_column_content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"spotify_container\"},/*#__PURE__*/React.createElement(\"iframe\",{src:\"https://open.spotify.com/embed/track/\"+spotifyIdentifier,width:\"100%\",height:\"380\",frameBorder:\"0\",allowfullscreen:\"\",allow:\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"}),/*#__PURE__*/React.createElement(\"button\",{className:\"spotify_button\",onClick:updateSpotify},\"Refresh\"))))));}export default Closing;","map":{"version":3,"sources":["/Users/raymondzhang/Code/website/raymondxyz.github.io/raymondxyz/src/components/closing/Closing.js"],"names":["React","useState","useEffect","colors","NavArrowDown","NavArrowUp","data0","data1","data2","data3","ScrollAnimation","spotifyIdentifier","allIdentifiers","totalTracks","loadSpotifyIDS","data","identifiers","sum","forEach","jsonFile","items","trackitem","push","track","id","Closing","scrollDown","scrollUp","tooltipDown","tooltipUp","setTrack","updateSpotify","randomIndex","Math","round","random","background","white","color","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { colors } from '../../styling/colors'\nimport NavArrowDown from '../miscellaneous/NavArrowDown';\nimport NavArrowUp from '../miscellaneous/NavArrowUp';\nimport data0 from \"../../assets/response_offset0.json\";\nimport data1 from \"../../assets/response_offset100.json\";\nimport data2 from \"../../assets/response_offset200.json\";\nimport data3 from \"../../assets/response_offset300.json\";\nimport ScrollAnimation from \"react-animate-on-scroll\";\n\nvar spotifyIdentifier = \"6vvoQKMci0NB7Zbo10t61N\"\nvar allIdentifiers;\nvar totalTracks = 1;\n\n// This function is crucial for the component to work. We need it to load the array of string IDs. We default the ID value\n// to a meenoi song in case it doesn't load before the script loads, but otherwise this will load before user clicks reroll.\n// We have not used an API (anymore) because it requires the use of authorisation (OAuth 2.0) and I don't want to\n// hardcode sensitive data into the publicly available code.\nfunction loadSpotifyIDS() {\n\n    const data = [data0, data1, data2, data3];\n    const identifiers = []\n    var sum = 0;\n    data.forEach( jsonFile => {\n        jsonFile.items.forEach(trackitem => {\n            identifiers.push(trackitem.track.id); \n            sum++;\n        })\n    })\n\n    totalTracks = sum;\n    allIdentifiers = identifiers;\n}\n\nfunction Closing({\n    scrollDown,\n    scrollUp,\n    tooltipDown,\n    tooltipUp,\n    id\n}) {\n\n    const [track, setTrack] = useState();\n\n    const updateSpotify = ()=> {\n        \n        var randomIndex = Math.round(Math.random()*totalTracks);\n        spotifyIdentifier = allIdentifiers[randomIndex];\n\n        // Reload the component\n        setTrack({});\n\n    }\n\n    // On mount we want to do a load of data first (or an API call) and then update once to randomise initial song\n    useEffect(() => {\n        loadSpotifyIDS();\n        updateSpotify();\n    }, []);\n\n    return (\n        <div\n          className=\"full_section\"\n          style={{ background: \"linear-gradient(90deg, #000000 35%, #111111 35%)\" }}\n          id={id}\n        >\n\n            <div className=\"section_two_column\">\n\n                <ScrollAnimation animateIn={\"animate__zoomIn\"} delay=\"200\" duration=\"0.7\" animateOnce={true}>\n                    <div className=\"left_column_content\">\n                        <div className=\"arrow_section_up\">\n                            <NavArrowUp coloring={colors.white} scrollUp={scrollUp} tooltipUp={tooltipUp}></NavArrowUp>\n                        </div>\n                        <h1 style={{ color: colors.white, textAlign: \"center\" }}> Bored? </h1>\n                        <h3 style={{ color: colors.white, textAlign: \"center\" }}> \n                            A bit of fun. Explore the songs I've recently listened to and liked on spotify; click refresh to randomly retrieve a different song. \n                        </h3>\n                        <div className=\"arrow_section_down\">\n                        </div>\n                    </div>\n                </ScrollAnimation>\n\n                <ScrollAnimation animateIn={\"animate__zoomIn\"} delay=\"200\" duration=\"0.7\" animateOnce={true}>\n                    <div className=\"right_column_content\">\n                        <div className=\"spotify_container\">\n                            <iframe src={\"https://open.spotify.com/embed/track/\"+spotifyIdentifier} width=\"100%\" height=\"380\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"></iframe>\n                            <button className=\"spotify_button\" onClick={updateSpotify}>Refresh</button>\n                        </div>\n                    </div>\n                </ScrollAnimation>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Closing\n\n"]},"metadata":{},"sourceType":"module"}