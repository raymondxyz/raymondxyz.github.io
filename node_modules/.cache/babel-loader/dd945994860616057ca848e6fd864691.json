{"ast":null,"code":"var _jsxFileName = \"/Users/raymondzhang/Code/website/raymondxyz.github.io/raymondxyz/src/components/closing/Closing.js\";\nimport React, { useState, useEffect } from 'react';\nimport { colors } from '../../styling/colors';\nimport NavArrowDown from '../miscellaneous/NavArrowDown';\nimport NavArrowUp from '../miscellaneous/NavArrowUp';\nimport data0 from \"../../assets/response_offset0.json\";\nimport data1 from \"../../assets/response_offset100.json\";\nimport data2 from \"../../assets/response_offset200.json\";\nimport data3 from \"../../assets/response_offset300.json\";\nimport ScrollAnimation from \"react-animate-on-scroll\";\nvar spotifyIdentifier = \"6vvoQKMci0NB7Zbo10t61N\";\nvar allIdentifiers;\nvar totalTracks = 1; // This function is crucial for the component to work. We need it to load the array of string IDs. We default the ID value\n// to a meenoi song in case it doesn't load before the script loads, but otherwise this will load before user clicks reroll.\n// We have not used an API (anymore) because it requires the use of authorisation (OAuth 2.0) and I don't want to\n// hardcode sensitive data into the publicly available code.\n\nfunction loadSpotifyIDS() {\n  const data = [data0, data1, data2, data3];\n  const identifiers = [];\n  var sum = 0;\n  data.forEach(jsonFile => {\n    jsonFile.items.forEach(trackitem => {\n      identifiers.push(trackitem.track.id);\n      sum++;\n    });\n  });\n  totalTracks = sum;\n  allIdentifiers = identifiers;\n}\n\nfunction Closing(_ref) {\n  let {\n    scrollDown,\n    scrollUp,\n    tooltipDown,\n    tooltipUp,\n    id\n  } = _ref;\n  const [track, setTrack] = useState();\n\n  const updateSpotify = () => {\n    var randomIndex = Math.round(Math.random() * totalTracks);\n    spotifyIdentifier = allIdentifiers[randomIndex]; // Reload the component\n\n    setTrack({});\n  }; // On mount we want to do a load of data first (or an API call) and then update once to randomise initial song\n\n\n  useEffect(() => {\n    loadSpotifyIDS();\n    updateSpotify();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full_section\",\n    style: {\n      background: \"linear-gradient(90deg, #000000 35%, #111111 35%)\"\n    },\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"section_two_column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ScrollAnimation, {\n    animateIn: \"animate__zoomIn\",\n    delay: \"200\",\n    duration: \"0.7\",\n    animateOnce: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left_column_content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"arrow_section_up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(NavArrowUp, {\n    coloring: colors.white,\n    scrollUp: scrollUp,\n    tooltipUp: tooltipUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    style: {\n      color: colors.white,\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, \" Music \"), /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: colors.white,\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }, \"A bit of fun. Here's a song I've recently listened to and liked on spotify; click refresh to randomly retrieve a different song.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"arrow_section_down\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(ScrollAnimation, {\n    animateIn: \"animate__zoomIn\",\n    delay: \"200\",\n    duration: \"1.2\",\n    animateOnce: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right_column_content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spotify_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"iframe\", {\n    src: \"https://open.spotify.com/embed/track/\" + spotifyIdentifier,\n    width: \"100%\",\n    height: \"380\",\n    frameBorder: \"0\",\n    allowfullscreen: \"\",\n    allow: \"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"spotify_button\",\n    onClick: updateSpotify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, \"Refresh\"))))));\n}\n\nexport default Closing;","map":{"version":3,"sources":["/Users/raymondzhang/Code/website/raymondxyz.github.io/raymondxyz/src/components/closing/Closing.js"],"names":["React","useState","useEffect","colors","NavArrowDown","NavArrowUp","data0","data1","data2","data3","ScrollAnimation","spotifyIdentifier","allIdentifiers","totalTracks","loadSpotifyIDS","data","identifiers","sum","forEach","jsonFile","items","trackitem","push","track","id","Closing","scrollDown","scrollUp","tooltipDown","tooltipUp","setTrack","updateSpotify","randomIndex","Math","round","random","background","white","color","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { colors } from '../../styling/colors'\nimport NavArrowDown from '../miscellaneous/NavArrowDown';\nimport NavArrowUp from '../miscellaneous/NavArrowUp';\nimport data0 from \"../../assets/response_offset0.json\";\nimport data1 from \"../../assets/response_offset100.json\";\nimport data2 from \"../../assets/response_offset200.json\";\nimport data3 from \"../../assets/response_offset300.json\";\nimport ScrollAnimation from \"react-animate-on-scroll\";\n\nvar spotifyIdentifier = \"6vvoQKMci0NB7Zbo10t61N\"\nvar allIdentifiers;\nvar totalTracks = 1;\n\n// This function is crucial for the component to work. We need it to load the array of string IDs. We default the ID value\n// to a meenoi song in case it doesn't load before the script loads, but otherwise this will load before user clicks reroll.\n// We have not used an API (anymore) because it requires the use of authorisation (OAuth 2.0) and I don't want to\n// hardcode sensitive data into the publicly available code.\nfunction loadSpotifyIDS() {\n\n    const data = [data0, data1, data2, data3];\n    const identifiers = []\n    var sum = 0;\n    data.forEach( jsonFile => {\n        jsonFile.items.forEach(trackitem => {\n            identifiers.push(trackitem.track.id); \n            sum++;\n        })\n    })\n\n    totalTracks = sum;\n    allIdentifiers = identifiers;\n}\n\nfunction Closing({\n    scrollDown,\n    scrollUp,\n    tooltipDown,\n    tooltipUp,\n    id\n}) {\n\n    const [track, setTrack] = useState();\n\n    const updateSpotify = ()=> {\n        \n        var randomIndex = Math.round(Math.random()*totalTracks);\n        spotifyIdentifier = allIdentifiers[randomIndex];\n\n        // Reload the component\n        setTrack({});\n\n    }\n\n    // On mount we want to do a load of data first (or an API call) and then update once to randomise initial song\n    useEffect(() => {\n        loadSpotifyIDS();\n        updateSpotify();\n    }, []);\n\n    return (\n        <div\n          className=\"full_section\"\n          style={{ background: \"linear-gradient(90deg, #000000 35%, #111111 35%)\" }}\n          id={id}\n        >\n\n            <div className=\"section_two_column\">\n\n                <ScrollAnimation animateIn={\"animate__zoomIn\"} delay=\"200\" duration=\"0.7\" animateOnce={true}>\n                    <div className=\"left_column_content\">\n                        <div className=\"arrow_section_up\">\n                            <NavArrowUp coloring={colors.white} scrollUp={scrollUp} tooltipUp={tooltipUp}></NavArrowUp>\n                        </div>\n                        <h1 style={{ color: colors.white, textAlign: \"center\" }}> Music </h1>\n                        <h3 style={{ color: colors.white, textAlign: \"center\" }}> \n                            A bit of fun. Here's a song I've recently listened to and liked on spotify; click refresh to randomly retrieve a different song. \n                        </h3>\n                        <div className=\"arrow_section_down\">\n                        </div>\n                    </div>\n                </ScrollAnimation>\n\n                <ScrollAnimation animateIn={\"animate__zoomIn\"} delay=\"200\" duration=\"1.2\" animateOnce={true}>\n                    <div className=\"right_column_content\">\n                        <div className=\"spotify_container\">\n                            <iframe src={\"https://open.spotify.com/embed/track/\"+spotifyIdentifier} width=\"100%\" height=\"380\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"></iframe>\n                            <button className=\"spotify_button\" onClick={updateSpotify}>Refresh</button>\n                        </div>\n                    </div>\n                </ScrollAnimation>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Closing\n\n"]},"metadata":{},"sourceType":"module"}